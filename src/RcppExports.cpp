// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include <RcppArmadillo.h>
#include <Rcpp.h>

using namespace Rcpp;

#ifdef RCPP_USE_GLOBAL_ROSTREAM
Rcpp::Rostream<true>&  Rcpp::Rcout = Rcpp::Rcpp_cout_get();
Rcpp::Rostream<false>& Rcpp::Rcerr = Rcpp::Rcpp_cerr_get();
#endif

// centered_kernel_matrix
arma::mat centered_kernel_matrix(const arma::vec& first_vec_kernel, const arma::vec& second_vec_kernel, const arma::vec& centering_grid, double hurst_coef);
RcppExport SEXP _kefV1_centered_kernel_matrix(SEXP first_vec_kernelSEXP, SEXP second_vec_kernelSEXP, SEXP centering_gridSEXP, SEXP hurst_coefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type first_vec_kernel(first_vec_kernelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type second_vec_kernel(second_vec_kernelSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type centering_grid(centering_gridSEXP);
    Rcpp::traits::input_parameter< double >::type hurst_coef(hurst_coefSEXP);
    rcpp_result_gen = Rcpp::wrap(centered_kernel_matrix(first_vec_kernel, second_vec_kernel, centering_grid, hurst_coef));
    return rcpp_result_gen;
END_RCPP
}
// centered_kernel_matrix_hd
arma::mat centered_kernel_matrix_hd(const arma::mat& first_mat_kernel, const arma::mat& second_mat_kernel, const arma::mat& centering_mat_grid, double hurst_coef);
RcppExport SEXP _kefV1_centered_kernel_matrix_hd(SEXP first_mat_kernelSEXP, SEXP second_mat_kernelSEXP, SEXP centering_mat_gridSEXP, SEXP hurst_coefSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type first_mat_kernel(first_mat_kernelSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type second_mat_kernel(second_mat_kernelSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type centering_mat_grid(centering_mat_gridSEXP);
    Rcpp::traits::input_parameter< double >::type hurst_coef(hurst_coefSEXP);
    rcpp_result_gen = Rcpp::wrap(centered_kernel_matrix_hd(first_mat_kernel, second_mat_kernel, centering_mat_grid, hurst_coef));
    return rcpp_result_gen;
END_RCPP
}
// density_at_sampled_x
arma::vec density_at_sampled_x(const arma::mat& centered_kernel_mat_at_sampled, double lambda_hat, const arma::vec& weight_hat_vec);
RcppExport SEXP _kefV1_density_at_sampled_x(SEXP centered_kernel_mat_at_sampledSEXP, SEXP lambda_hatSEXP, SEXP weight_hat_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type centered_kernel_mat_at_sampled(centered_kernel_mat_at_sampledSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_hat(lambda_hatSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight_hat_vec(weight_hat_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(density_at_sampled_x(centered_kernel_mat_at_sampled, lambda_hat, weight_hat_vec));
    return rcpp_result_gen;
END_RCPP
}
// density_at_grid
arma::vec density_at_grid(const arma::mat& centered_kernel_mat_at_grid, const arma::vec& centered_kernel_self_grid, double lambda_hat, const arma::vec& weight_hat_vec);
RcppExport SEXP _kefV1_density_at_grid(SEXP centered_kernel_mat_at_gridSEXP, SEXP centered_kernel_self_gridSEXP, SEXP lambda_hatSEXP, SEXP weight_hat_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type centered_kernel_mat_at_grid(centered_kernel_mat_at_gridSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type centered_kernel_self_grid(centered_kernel_self_gridSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_hat(lambda_hatSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight_hat_vec(weight_hat_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(density_at_grid(centered_kernel_mat_at_grid, centered_kernel_self_grid, lambda_hat, weight_hat_vec));
    return rcpp_result_gen;
END_RCPP
}
// get_dens_wo_grid
arma::vec get_dens_wo_grid(const arma::mat& centered_kernel_mat_at_sampled, double min_x, double max_x, const arma::vec& sampled_x, double lambda_hat, const arma::vec& weight_hat_vec);
RcppExport SEXP _kefV1_get_dens_wo_grid(SEXP centered_kernel_mat_at_sampledSEXP, SEXP min_xSEXP, SEXP max_xSEXP, SEXP sampled_xSEXP, SEXP lambda_hatSEXP, SEXP weight_hat_vecSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type centered_kernel_mat_at_sampled(centered_kernel_mat_at_sampledSEXP);
    Rcpp::traits::input_parameter< double >::type min_x(min_xSEXP);
    Rcpp::traits::input_parameter< double >::type max_x(max_xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sampled_x(sampled_xSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_hat(lambda_hatSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight_hat_vec(weight_hat_vecSEXP);
    rcpp_result_gen = Rcpp::wrap(get_dens_wo_grid(centered_kernel_mat_at_sampled, min_x, max_x, sampled_x, lambda_hat, weight_hat_vec));
    return rcpp_result_gen;
END_RCPP
}
// get_dens_or_prob
List get_dens_or_prob(const arma::mat& centered_kernel_mat_at_sampled, const arma::mat& centered_kernel_mat_at_grid, const arma::vec& centered_kernel_self_grid, const arma::vec& sampled_x, const arma::vec& x_grid, double lambda_hat, const arma::vec& weight_hat_vec, bool type_of_p_is_prob, bool type_of_q_is_prob);
RcppExport SEXP _kefV1_get_dens_or_prob(SEXP centered_kernel_mat_at_sampledSEXP, SEXP centered_kernel_mat_at_gridSEXP, SEXP centered_kernel_self_gridSEXP, SEXP sampled_xSEXP, SEXP x_gridSEXP, SEXP lambda_hatSEXP, SEXP weight_hat_vecSEXP, SEXP type_of_p_is_probSEXP, SEXP type_of_q_is_probSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type centered_kernel_mat_at_sampled(centered_kernel_mat_at_sampledSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type centered_kernel_mat_at_grid(centered_kernel_mat_at_gridSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type centered_kernel_self_grid(centered_kernel_self_gridSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sampled_x(sampled_xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type x_grid(x_gridSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_hat(lambda_hatSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type weight_hat_vec(weight_hat_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type type_of_p_is_prob(type_of_p_is_probSEXP);
    Rcpp::traits::input_parameter< bool >::type type_of_q_is_prob(type_of_q_is_probSEXP);
    rcpp_result_gen = Rcpp::wrap(get_dens_or_prob(centered_kernel_mat_at_sampled, centered_kernel_mat_at_grid, centered_kernel_self_grid, sampled_x, x_grid, lambda_hat, weight_hat_vec, type_of_p_is_prob, type_of_q_is_prob));
    return rcpp_result_gen;
END_RCPP
}
// get_middle_points_grid
arma::vec get_middle_points_grid(double min, const arma::vec& samples, double max);
RcppExport SEXP _kefV1_get_middle_points_grid(SEXP minSEXP, SEXP samplesSEXP, SEXP maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type min(minSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type samples(samplesSEXP);
    Rcpp::traits::input_parameter< double >::type max(maxSEXP);
    rcpp_result_gen = Rcpp::wrap(get_middle_points_grid(min, samples, max));
    return rcpp_result_gen;
END_RCPP
}
// get_s_function
arma::vec get_s_function(const arma::vec& weight_hat_vec, double lambda_hat, double tau_hat, const arma::mat& centered_kernel_mat_at_sampled, const arma::vec& sampled_x, double min_x, double max_x, Rcpp::Nullable<arma::vec> prior_variance_p_vector, bool q_with_base, bool with_prob_in_var, bool normalised_q, bool normalised_p, bool p_with_base);
RcppExport SEXP _kefV1_get_s_function(SEXP weight_hat_vecSEXP, SEXP lambda_hatSEXP, SEXP tau_hatSEXP, SEXP centered_kernel_mat_at_sampledSEXP, SEXP sampled_xSEXP, SEXP min_xSEXP, SEXP max_xSEXP, SEXP prior_variance_p_vectorSEXP, SEXP q_with_baseSEXP, SEXP with_prob_in_varSEXP, SEXP normalised_qSEXP, SEXP normalised_pSEXP, SEXP p_with_baseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type weight_hat_vec(weight_hat_vecSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_hat(lambda_hatSEXP);
    Rcpp::traits::input_parameter< double >::type tau_hat(tau_hatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type centered_kernel_mat_at_sampled(centered_kernel_mat_at_sampledSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sampled_x(sampled_xSEXP);
    Rcpp::traits::input_parameter< double >::type min_x(min_xSEXP);
    Rcpp::traits::input_parameter< double >::type max_x(max_xSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<arma::vec> >::type prior_variance_p_vector(prior_variance_p_vectorSEXP);
    Rcpp::traits::input_parameter< bool >::type q_with_base(q_with_baseSEXP);
    Rcpp::traits::input_parameter< bool >::type with_prob_in_var(with_prob_in_varSEXP);
    Rcpp::traits::input_parameter< bool >::type normalised_q(normalised_qSEXP);
    Rcpp::traits::input_parameter< bool >::type normalised_p(normalised_pSEXP);
    Rcpp::traits::input_parameter< bool >::type p_with_base(p_with_baseSEXP);
    rcpp_result_gen = Rcpp::wrap(get_s_function(weight_hat_vec, lambda_hat, tau_hat, centered_kernel_mat_at_sampled, sampled_x, min_x, max_x, prior_variance_p_vector, q_with_base, with_prob_in_var, normalised_q, normalised_p, p_with_base));
    return rcpp_result_gen;
END_RCPP
}
// get_s_function_hd
arma::vec get_s_function_hd(const arma::vec& weight_hat_vec, double lambda_hat, double tau_hat, const arma::mat& centered_kernel_mat_at_sampled, const arma::mat& sampled_x, Rcpp::Nullable<arma::vec> prior_variance_p_vector, bool with_prob_in_var, bool normalised_q, bool normalised_p, bool p_with_base);
RcppExport SEXP _kefV1_get_s_function_hd(SEXP weight_hat_vecSEXP, SEXP lambda_hatSEXP, SEXP tau_hatSEXP, SEXP centered_kernel_mat_at_sampledSEXP, SEXP sampled_xSEXP, SEXP prior_variance_p_vectorSEXP, SEXP with_prob_in_varSEXP, SEXP normalised_qSEXP, SEXP normalised_pSEXP, SEXP p_with_baseSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type weight_hat_vec(weight_hat_vecSEXP);
    Rcpp::traits::input_parameter< double >::type lambda_hat(lambda_hatSEXP);
    Rcpp::traits::input_parameter< double >::type tau_hat(tau_hatSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type centered_kernel_mat_at_sampled(centered_kernel_mat_at_sampledSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type sampled_x(sampled_xSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<arma::vec> >::type prior_variance_p_vector(prior_variance_p_vectorSEXP);
    Rcpp::traits::input_parameter< bool >::type with_prob_in_var(with_prob_in_varSEXP);
    Rcpp::traits::input_parameter< bool >::type normalised_q(normalised_qSEXP);
    Rcpp::traits::input_parameter< bool >::type normalised_p(normalised_pSEXP);
    Rcpp::traits::input_parameter< bool >::type p_with_base(p_with_baseSEXP);
    rcpp_result_gen = Rcpp::wrap(get_s_function_hd(weight_hat_vec, lambda_hat, tau_hat, centered_kernel_mat_at_sampled, sampled_x, prior_variance_p_vector, with_prob_in_var, normalised_q, normalised_p, p_with_base));
    return rcpp_result_gen;
END_RCPP
}
// interp_linear_cpp
arma::vec interp_linear_cpp(const arma::vec& x, const arma::vec& y, const arma::vec& xnew);
RcppExport SEXP _kefV1_interp_linear_cpp(SEXP xSEXP, SEXP ySEXP, SEXP xnewSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::vec& >::type x(xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type y(ySEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type xnew(xnewSEXP);
    rcpp_result_gen = Rcpp::wrap(interp_linear_cpp(x, y, xnew));
    return rcpp_result_gen;
END_RCPP
}
// marginal_log_likelihood
double marginal_log_likelihood(const arma::mat& centered_kernel_mat_at_sampled, const arma::vec& sampled_x, double min_x, double max_x, arma::vec p_vec, double lambda, double tau, const arma::mat& std_rnorm_matrix, int MC_iterations, bool parallel_computing);
RcppExport SEXP _kefV1_marginal_log_likelihood(SEXP centered_kernel_mat_at_sampledSEXP, SEXP sampled_xSEXP, SEXP min_xSEXP, SEXP max_xSEXP, SEXP p_vecSEXP, SEXP lambdaSEXP, SEXP tauSEXP, SEXP std_rnorm_matrixSEXP, SEXP MC_iterationsSEXP, SEXP parallel_computingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type centered_kernel_mat_at_sampled(centered_kernel_mat_at_sampledSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sampled_x(sampled_xSEXP);
    Rcpp::traits::input_parameter< double >::type min_x(min_xSEXP);
    Rcpp::traits::input_parameter< double >::type max_x(max_xSEXP);
    Rcpp::traits::input_parameter< arma::vec >::type p_vec(p_vecSEXP);
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type std_rnorm_matrix(std_rnorm_matrixSEXP);
    Rcpp::traits::input_parameter< int >::type MC_iterations(MC_iterationsSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel_computing(parallel_computingSEXP);
    rcpp_result_gen = Rcpp::wrap(marginal_log_likelihood(centered_kernel_mat_at_sampled, sampled_x, min_x, max_x, p_vec, lambda, tau, std_rnorm_matrix, MC_iterations, parallel_computing));
    return rcpp_result_gen;
END_RCPP
}
// call_get_weights_wo_grid_BBsolve
arma::vec call_get_weights_wo_grid_BBsolve(double lambda, double tau, const arma::mat& centered_kernel_mat_at_sampled, const arma::vec& sampled_x, double min_x, double max_x, const arma::vec& p_vec, bool print_trace);
RcppExport SEXP _kefV1_call_get_weights_wo_grid_BBsolve(SEXP lambdaSEXP, SEXP tauSEXP, SEXP centered_kernel_mat_at_sampledSEXP, SEXP sampled_xSEXP, SEXP min_xSEXP, SEXP max_xSEXP, SEXP p_vecSEXP, SEXP print_traceSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< double >::type lambda(lambdaSEXP);
    Rcpp::traits::input_parameter< double >::type tau(tauSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type centered_kernel_mat_at_sampled(centered_kernel_mat_at_sampledSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sampled_x(sampled_xSEXP);
    Rcpp::traits::input_parameter< double >::type min_x(min_xSEXP);
    Rcpp::traits::input_parameter< double >::type max_x(max_xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type p_vec(p_vecSEXP);
    Rcpp::traits::input_parameter< bool >::type print_trace(print_traceSEXP);
    rcpp_result_gen = Rcpp::wrap(call_get_weights_wo_grid_BBsolve(lambda, tau, centered_kernel_mat_at_sampled, sampled_x, min_x, max_x, p_vec, print_trace));
    return rcpp_result_gen;
END_RCPP
}
// compute_marginal_likelihood_grid_parallel
arma::mat compute_marginal_likelihood_grid_parallel(const arma::mat& centered_kernel_mat_at_sampled, double min_x, double max_x, const arma::vec& sampled_x, const arma::mat& hyperparam_grid, double initial_lambda, const arma::vec& initial_w, int MC_iterations, int max_iterations, bool parallel_computing);
RcppExport SEXP _kefV1_compute_marginal_likelihood_grid_parallel(SEXP centered_kernel_mat_at_sampledSEXP, SEXP min_xSEXP, SEXP max_xSEXP, SEXP sampled_xSEXP, SEXP hyperparam_gridSEXP, SEXP initial_lambdaSEXP, SEXP initial_wSEXP, SEXP MC_iterationsSEXP, SEXP max_iterationsSEXP, SEXP parallel_computingSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< const arma::mat& >::type centered_kernel_mat_at_sampled(centered_kernel_mat_at_sampledSEXP);
    Rcpp::traits::input_parameter< double >::type min_x(min_xSEXP);
    Rcpp::traits::input_parameter< double >::type max_x(max_xSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type sampled_x(sampled_xSEXP);
    Rcpp::traits::input_parameter< const arma::mat& >::type hyperparam_grid(hyperparam_gridSEXP);
    Rcpp::traits::input_parameter< double >::type initial_lambda(initial_lambdaSEXP);
    Rcpp::traits::input_parameter< const arma::vec& >::type initial_w(initial_wSEXP);
    Rcpp::traits::input_parameter< int >::type MC_iterations(MC_iterationsSEXP);
    Rcpp::traits::input_parameter< int >::type max_iterations(max_iterationsSEXP);
    Rcpp::traits::input_parameter< bool >::type parallel_computing(parallel_computingSEXP);
    rcpp_result_gen = Rcpp::wrap(compute_marginal_likelihood_grid_parallel(centered_kernel_mat_at_sampled, min_x, max_x, sampled_x, hyperparam_grid, initial_lambda, initial_w, MC_iterations, max_iterations, parallel_computing));
    return rcpp_result_gen;
END_RCPP
}
// generate_voronoi
Rcpp::List generate_voronoi(Rcpp::NumericMatrix points, double x_min, double x_max, double y_min, double y_max);
RcppExport SEXP _kefV1_generate_voronoi(SEXP pointsSEXP, SEXP x_minSEXP, SEXP x_maxSEXP, SEXP y_minSEXP, SEXP y_maxSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< Rcpp::NumericMatrix >::type points(pointsSEXP);
    Rcpp::traits::input_parameter< double >::type x_min(x_minSEXP);
    Rcpp::traits::input_parameter< double >::type x_max(x_maxSEXP);
    Rcpp::traits::input_parameter< double >::type y_min(y_minSEXP);
    Rcpp::traits::input_parameter< double >::type y_max(y_maxSEXP);
    rcpp_result_gen = Rcpp::wrap(generate_voronoi(points, x_min, x_max, y_min, y_max));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP _kef_centered_kernel_matrix(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _kef_density_at_grid(SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _kef_density_at_sampled_x(SEXP, SEXP, SEXP);
RcppExport SEXP _kef_get_dens_or_prob(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _kef_get_dens_wo_grid(SEXP, SEXP, SEXP, SEXP, SEXP, SEXP);
RcppExport SEXP _kef_get_middle_points_grid(SEXP, SEXP, SEXP);

static const R_CallMethodDef CallEntries[] = {
    {"_kefV1_centered_kernel_matrix", (DL_FUNC) &_kefV1_centered_kernel_matrix, 4},
    {"_kefV1_centered_kernel_matrix_hd", (DL_FUNC) &_kefV1_centered_kernel_matrix_hd, 4},
    {"_kefV1_density_at_sampled_x", (DL_FUNC) &_kefV1_density_at_sampled_x, 3},
    {"_kefV1_density_at_grid", (DL_FUNC) &_kefV1_density_at_grid, 4},
    {"_kefV1_get_dens_wo_grid", (DL_FUNC) &_kefV1_get_dens_wo_grid, 6},
    {"_kefV1_get_dens_or_prob", (DL_FUNC) &_kefV1_get_dens_or_prob, 9},
    {"_kefV1_get_middle_points_grid", (DL_FUNC) &_kefV1_get_middle_points_grid, 3},
    {"_kefV1_get_s_function", (DL_FUNC) &_kefV1_get_s_function, 13},
    {"_kefV1_get_s_function_hd", (DL_FUNC) &_kefV1_get_s_function_hd, 10},
    {"_kefV1_interp_linear_cpp", (DL_FUNC) &_kefV1_interp_linear_cpp, 3},
    {"_kefV1_marginal_log_likelihood", (DL_FUNC) &_kefV1_marginal_log_likelihood, 10},
    {"_kefV1_call_get_weights_wo_grid_BBsolve", (DL_FUNC) &_kefV1_call_get_weights_wo_grid_BBsolve, 8},
    {"_kefV1_compute_marginal_likelihood_grid_parallel", (DL_FUNC) &_kefV1_compute_marginal_likelihood_grid_parallel, 10},
    {"_kefV1_generate_voronoi", (DL_FUNC) &_kefV1_generate_voronoi, 5},
    {"_kef_centered_kernel_matrix", (DL_FUNC) &_kef_centered_kernel_matrix, 4},
    {"_kef_density_at_grid",        (DL_FUNC) &_kef_density_at_grid,        4},
    {"_kef_density_at_sampled_x",   (DL_FUNC) &_kef_density_at_sampled_x,   3},
    {"_kef_get_dens_or_prob",       (DL_FUNC) &_kef_get_dens_or_prob,       9},
    {"_kef_get_dens_wo_grid",       (DL_FUNC) &_kef_get_dens_wo_grid,       6},
    {"_kef_get_middle_points_grid", (DL_FUNC) &_kef_get_middle_points_grid, 3},
    {NULL, NULL, 0}
};

RcppExport void R_init_kefV1(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
